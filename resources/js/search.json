[[{"l":"Знакомство","p":["Привет! Добро пожаловать в учебник по дисциплине Основы алгоритмизации и программирования.","Изначальной целью данного руководства была организация материалов именно под учебный процесс, но в конечном счёте помимо рекомпоновки существующих разрозненных источников сюда же добавилась цель объяснения материала максимально простым и понятным языком, при этом покрывая весь курс.","Важно также и понимать, что материал в первую очередь разрабатывался для направления \"Разработчиков мультимедийных и веб-приложений\", поэтому некоторые темы покрываются здесь либо вскользь, либо не описываются вообще (к примеру, деревья, хэш-таблицы и некоторые вещи, максимально специфичные для оптимизаций).","Само пособие составлено на язык C++, но практически все описываемые методы также актуальны и для чистого C. Плюс ко всему, C-подобный синтаксис используется в слишком большом количестве прочих языков программирования, так что после этого курса изучение какого-нибудь JavaScript, PHP и многих прочих языков (кроме Python, Go и некоторых других) разительно упростится, так как базовые конструкции во многих из них устроены одинаково.","Если вы совсем не знакомы с программированием и описанием алгоритмов, то советую начать изучение курса буквально \"от начала и до конца\", но для достаточно опытных разработчиков тут тоже найдётся что-нибудь интересное - весь материал структурирован максимально последовательно и подробно.","Приятного ознакомления!","Если у вас имеются вопросы по какой-то из тем, либо же вы заметили ошибку в материале или коде, то можете написать мне в ВК.","Дата последнего обновления: 18.10.2022(добавлены \"Алгоритмические конструкции\")"]}],[{"l":"Введение в алгоритмы","p":["Каждое наше утро начинается с выполнения рутинных задач: мы просыпаемся, умываемся, едим, едем на работу или учёбу. Несмотря на то, что все эти вещи выполняются на автоматизме, наш мозг включается на полную, чтобы проконтролировать выполнение этих самых действий, а их совокупность формирует какой-то алгоритм. Примерно также описываются алгоритмы и в программировании! Но есть свои нюансы.","Во-первых, давайте будем честны: многие выполняемые нами вещи мы не укладываем в алгоритмы в явной форме, мы даже не задумываемся о том, чтобы их контролировать, большую часть работы за нас выполняет мозг и двигает тело. Программы же, к сожалению, лишены такого мощного органа и поэтому написание в файлик “сложи мне два числа” не создаст программу. Любой код должен составляться на определённом языке, со своими правилами, последовательностями и алгоритмом. Так что же такое в конечном счёте алгоритм?","Алгоритм– система точных однозначных указаний, которая определяет последовательность действий над некоторыми объектами и после конечного числа шагов приводит к получению требуемого результата.","И тут не просто так выделены некоторые слова, потому что они максимально точно описывают основные требования к алгоритмам:","конечность: у любого алгоритма должно быть начало и какой-то осмысленный конец","точность: мы не можем абстрактно описать программе что она должна делать, все указания должны быть чёткими и однозначными","последовательность: в частном случае алгоритм строится по принципу“сверху-вниз”, и все действия в нём происходящие строго последовательны","результативность: любой алгоритм должен приводить к решению какой-то задачи либо давать ответы на вопросы","В то же время сами алгоритмы можно условно разделить на две крупные категории: численные и логические.","Численные алгоритмы- это, например, базовые математические операции: сложения, вычитания, умножения и т.д. Здесь у нас сама операция может формировать конечный результат. Логические алгоритмы же устроены куда сложнее: сюда могут включаться операции поиска, сравнения, перестановок и т.п. В отличие от численных алгоритмов, логические состоят из целых наборов операций, которые могут преобразовываться совершенно разными способами.","Ещё важно понимать, что логические алгоритмы могут состоять из большой совокупности численных, в то время как численные из логических - нет.","Подводя простой итог, алгоритм- это строгий набор действий, который приводит от какой-то начальной точки ( в которой у нас есть данные и/или действия) к конечной ( где эти самые данные или действия меняются).","А какими способами эти самые алгоритмы мы можем описать - рассмотрим в следующей теме :)"]}],[{"l":"Алгоритмы и их описание","p":["Как уже рассматривалось в прошлой теме, алгоритмы есть и в повседневной жизни, но мы не обращаем особого внимания на них, задаваясь вопросами \" так, сейчас мне надо встать, затем дойти до ванной, потом взять в руки зубную щётку и пасту, потом...\". Это всё происходит само собой.","Однако когда мы рассказываем кому-то о том, как прошёл наш день (например), этот алгоритм становится максимально ясным и понятным. Мы буквально описываем от начальной точки (начала дня) до конечной точки (текущего момента) то, что с нами происходило за сегодня. Чаще всего это описание выглядит как-то так:","Ну я проснулся, умылся, поел, сходил на занятия.","И это практически один из видов реально существующего описания алгоритмов в программировании!"]},{"l":"Словесное описание алгоритма","p":["Словесные описания буквально строятся из тех же слов и категорий, которые мы используем в повседневной жизни. Сами по себе задачи по программированию легче всего представлять именно в таком формате, а матёрые разработчики делают это в голове на автоматизме. Давайте рассмотрим для примера одну лёгкую задачу:","У Васи есть 5 яблок, а у Миши - 6 яблок. Сколько всего яблок у ребят?","Вы уже наверняка поняли, что правильный ответ 11. Но вы даже не задумывались о том, что ваш мозг автоматически обработал эту информацию и выдал вам ответ. А теперь разберёмся, как такую задачу прочитать и представить алгоритм её решения в форме словесного описания.","Для начала определимся, сколько у нас действующих лиц - их два: Вася и Петя. У каждого из действующих лиц есть яблоки и их количество различно. Из-за того, что объекты сами по себе одинаковые в рамках решения задачи их видом можно пренебречь, т.е. для рассмотрения мы возьмём только количество яблок. А для того, чтобы узнать, сколько всего этих самых яблок, нам нужно сложить их количество.","Конечно такое подробное описание может показаться глупостью для студентов СПО и выше, но поверьте, с усложнением задач будет усложняться и их логика, а описание алгоритма подобным образом будет полезно всегда.","Такие алгоритмы также можно представить и на бумаге для простоты переноса в программный вид. Например:","Объясню парочку моментов: S1, S2, S3, ...- это отдельные операции, по которым должен выполняться наш алгоритм. Помните про требование последовательности ко всем алгоритмам? Переменная- это выделенное пространство, которое имеет имя( по которому мы можем обращаться к переменной) и может хранить данные( в нашем случае мы храним количество яблок у каждого паренька). Подробнее о переменных поговорим уже на стадии написании кода.","В остальном же мы просто описываем каждый шаг, необходимый для выполнения алгоритма. Выглядит конечно перегружено, но напомню, что большая часть программистов строит такие последовательности на автоматизме. Новичкам же будет полезно такое отработать для развития логики.","Тут я довольно сильно сократил количество шагов, задавая значение переменной при её создании, а также выводя сумму сразу, не используя дополнительную переменную. Подробнее об этом будет показываться и рассказываться также на примерах с кодом."]},{"l":"Алгоритмический язык","p":["Построение алгоритмов на алгоритмическом языке приближено непосредственно к написанию кода, но не привязано к архитектуре компьютера, его устройству и языку программирования. При знании базиса этого языка можно описывать то, как должна работать программа, и это описание можно легко перенести на любой другой, реально существующий язык программирования и выполнить программу.","Рассмотрим всё ту же задачу про Васю и Мишу и представим её на алгоритмическом языке:","Алгоритмический язык появился очень давно (1958 год) и изначально был полноценным языком программирования (ALGOL), одним из первых высокого уровня.","Хотя язык сам по себе оказал заметное влияние на все разработанные позднее императивные языки программирования — в частности, на язык Pascal и C++, после появления новых языков Алгол начал терять свою актуальность, а сейчас не используется вовсе - ни для разработки, ни для реального описания алгоритмов. ¯\\_(ツ)_/¯"]},{"i":"схематическое-описание-блок-схемы","l":"Схематическое описание (блок-схемы)","p":["И тут пришло самое страшное...","Блок-схемы вызывают у многих студентов неприязнь и недопонимание, но я думаю что это связано с тем, что изначально не объясняется, зачем оно нужно и как с этим правильно работать. Я постараюсь это исправить!","Сами по себе блок-схемы являются достаточно простым способом описать вашу систему графически в виде базовых блоков, исходя из которых строится вся программа. Во многом блок-схемы похожи на словесное описание, только вместо жёсткого указания текстом алгоритм работы программы, мы будем это делать с помощью фигурных элементов. Каждый из них осуществляет строго определённую роль, дабы не допускать путаницы при чтении схемы.","Разберём базовые блоки:","Здесь указаны основные блоки, которые нам в дальнейшем пригодятся.","Блок с буквой А называется соединителем и он используется в тех случаях, когда нам не хватает места чтобы полностью разместить блок-схему и нам требуется её перенос.","Пока что стоит просто запомнить их в лицо, ещё несколько блоков и то, как они связываются и выглядят на практике, разберём в следующей теме.","Но несмотря на свою понятность и функциональность, у блок-схем есть один значительный недостаток: они не могут отражать алгоритмы, которые реализуются во взаимодействии абстракций при объектно-ориентированном подходе ( т.е. с помощью них строятся только достаточно простые описания). Для описания более сложных и масштабируемых систем с большей гибкостью используются нотации UML, которые в частном случае рассматриваются в дисциплине \"Проектирование и дизайн информационных систем\", поэтому их мы покрывать не будем."]}],[{"l":"Алгоритмические конструкции","p":["Итак, в прошлой теме мы рассмотрели каким образом можно составлять алгоритмы для наших программ: словесно, алгоритмическим языком и блок-схемами. А какие алгоритмы бывают в принципе? Для того чтобы учитывать все случаи в алгоритмах у нас предусматривается три базовые конструкции: следования, ветвления и повторения."]},{"i":"линейные-алгоритмы-следования","l":"Линейные алгоритмы (следования)","p":["Буквально означают и описываются таким образом, что все этапы работы программы выполняются строго последовательно и друг за другом. Пример словесного описания такого алгоритма приводился в прошлой статье задачкой про Васю и Мишу.","В формате блок-схемы данный алгоритм будет выглядеть следующим образом:","Обратите внимание, что для создания новых переменных мы используем сокращение var(от англ. variable). Если вы работаете со строго типизированными языками программирования вместо var желательно указывать тип переменной (int, float и т.д.).","Рассмотрим каждый блок поочерёдно:","Начинаем работу программы","Создаём переменные vasya и misha","Задаём значения переменным vasya и misha","Создаём переменную sum и задаём ей значение суммы vasya и misha","Выводим значение sum в консоль","Заканчиваем работу программы","И разберём блоки, которые тут присутствуют и что они делают.","Прямоугольник - действие( или операция). Этот блок мы используем в тех случаях, когда вводим в систему новые переменные или осуществляем базовые операции: изменение значения, математические операции и т.д.","Параллелограмм - данные( или ввод-вывод). С помощью этого блока мы выводим значения переменных или произвольный текст в консоль, а также считываем значения вводом с клавиатуры; так пользователь может указывать значения переменных по ходу работы программы.","Почти овал (закругленный прямоугольник) - ограничитель. Этот блок указывает, где у нас начинается программа и где она заканчивается."]},{"i":"условные-алгоритмы-ветвления","l":"Условные алгоритмы (ветвления)","p":["Пускай линейные алгоритмы и являются самыми распространёнными и необходимыми, но они довольно ограничены в своих возможностях. Когда мы рассматриваем однозначные, базисные задачки, они превосходно справляются со своей целью. Но что если мы возьмём задачу поинтереснее?","Пользователь вводит с клавиатуры число А. Напишите программу которая определяет, было введено положительное или отрицательное число.","В случае с такой задачкой нам необходимо каким-то образом проверить введённое число и вывести сообщение о том, положительное оно или отрицательное. И тут нам на помощь приходят алгоритмы ветвления!","С помощью данных алгоритмов мы можем проверять переменные на то, чтобы они удовлетворяли определённому условию. Если условие выполняется, то у нас происходят одни операции, а если нет- то другие. Описывается это всё дело следующим образом:","На блок-схеме такие алгоритмы понять можно проще:","Но вот ведь незадача: если мы введём ноль, то программа нам ничего не выдаст. Чтобы решить такую проблему мы можем вложить одно условие в другое.","В первом условии мы также рассматриваем, меньше нуля ли у нас А. Если нет, то у нас остаётся два варианта: либо А > 0, либо A равно нулю. Поэтому мы на ветке \" нет\" создаём ещё одно условие, где и проверяем, больше нуля ли у нас А.","Если да, то выводим соответствующее сообщение. Если нет, то последним случаем, который мы не рассмотрели остаётся А = 0 и мы также выводим сообщение."]},{"i":"циклические-алгоритмы-повторения","l":"Циклические алгоритмы (повторения)","p":["Несмотря на всю силу линейных и условных конструкций, у них есть один нюанс: действия, которые в них происходят однократны и иногда из-за этого решить ряд задач просто невозможно. К примеру, задачи на расчёт факториала и последовательности Фибоначчи. Конечно мы можем расписать их вручную, но что если речь заходит об очень больших последовательностях? Рассмотрим одну задачу:","Пользователь вводит с клавиатуры число. Рассчитать факториал этого числа.","Для простоты рассмотрения возьмём число 5.","Факториал пяти это 1 * 2 * 3 * 4 * 5, т. е. помимо вводимого нами числа мы должны брать в рассмотрение все предыдущие числа. И тут на помощь приходят циклы!","Циклы сами по себе упрощают задачу обращения к однотипным элементам, а также сокращают количество используемого в программе кода. А некоторые фишки возможно реализовать только с помощью циклов.","Во всех блок-схемах у нас будет абсолютно одинаковое начало. Мы создаём переменные:","N(число, факториал которого считаем);","fact(куда будем сохранять сам факториал числа, сразу приравниваем к 1 для перемножения);","i(переменная-счётчик, объяснение будет далее).","Циклы можно описывать тремя разными способами; можете выбрать тот, который вам будет понятнее всего."]},{"i":"способ-1-через-блок-цикла-шестиугольник","l":"Способ 1: Через блок цикла (шестиугольник)","p":["sdaf-drawio.png"]},{"i":"способ-2-через-ограничители-циклов-loop-limits","l":"Способ 2: Через ограничители циклов (loop limits)","p":["sdaf-drawio-2.png"]},{"i":"способ-3-через-условие-и-возврат-в-него","l":"Способ 3: Через условие и возврат в него","p":["sdaf-drawio-1.png"]}]]